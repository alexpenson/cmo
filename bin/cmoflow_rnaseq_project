#!/opt/common/CentOS_6-dev/python/python-2.7.10/bin/python
from cmo import workflow
import argparse, os, sys
import cmo, shutil 
from distutils.version import StrictVersion

def run_sleuth(samplefile):
    samplefile = os.path.abspath(samplefile)

    ## options(mc.cores = 4L)
    sleuth_cmd = [cmo.util.programs["R"]["3.2.2-dev"] + "Rscript",
                  "-e", "rnaseq.scripts::run_sleuth()",
                  "-d", inputdir,
                  "--gene.names", cmo.util.genomes[args.reference_sequence]['default']['gene_names']]
    return workflow.Job(" ".join(sleuth_cmd), 
                        resources="rusage[mem=4]",
                        name="Run Sleuth")

def QoRT_merge_all_junctions(samplefile, conditionname, minCount = 6):
    samplefile = os.path.abspath(samplefile)

    workdir = samplefile + "_" + conditionname + "/JunctionSeq_gff"
    decoder_filename = workdir + "/decoder.txt"
    merge_all_cmd = [cmo.util.programs["R"]["3.2.2-dev"] + "Rscript",
                     " -e", "'rnaseq.scripts::write.decoder()'", 
                     "-s", samplefile,
                     "-c", conditionname,
                     "&&",
                     cmo.util.programs['java']["default"], 
                     "-jar", cmo.util.programs['QoRT']["default"], 
                     "mergeNovelSplices",
                     "--minCount", str(minCount),
                     os.path.dirname(samplefile),
                     decoder_filename,
                     cmo.util.genomes[args.reference_sequence]['default']['gtf'],
                     workdir]
    return workflow.Job(" ".join(merge_all_cmd), 
                        resources="rusage[mem=35]",
                        name="Merge all QoRT junction and exon counts")

def QoRT_merge_excl_novel_junctions(inputdir):
    # java -jar /path/to/jarfile/QoRTs.jar makeFlatGff \
    #                --stranded \
    #                annoFiles/anno.gtf.gz \
    #                annoFiles/JunctionSeq.flat.gff.gz
    pass

def run_JunctionSeq(samplefile, conditionname):
    JunctionSeq_cmd = [cmo.util.programs["R"]["3.2.2-dev"] + "Rscript",
                      "-e", "'rnaseq.scripts::run_JunctionSeq()'",
                      "-s", samplefile,
                       "-c", conditionname,
                      "--gene.names", cmo.util.genomes[args.reference_sequence]['default']['gene_names']
                      ]
    return workflow.Job(" ".join(JunctionSeq_cmd),
                        resources="rusage[mem=50]",
                        name="Run JunctionSeq")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run RNASeq on luna!")
    parser.add_argument("-R", "--reference_sequence", required=True, 
                        choices=cmo.util.genomes.keys(),
                        help="name of reference")
    parser.add_argument("-s", "--samplefile", required=True,
                        help="text file listing samples and condition")
    parser.add_argument("-c", "--conditionname", required=True,
                        help="condition within samplefile")
    # parser.add_argument("-o", "--outputdir", default = ".",
    #                     help="output directory, will default to '.'")
    # parser.add_argument("-i", "--inputdir", default = ".",
    #                     help="input directory, will default to '.'")
    parser.add_argument("-n", "--minCounts", default = "6",
                        help="minCounts for JunctionSeq")
    # parser.add_argument("-s", '--samplenames', nargs='+', required=True,
    #                     help='directories within inputdir containing cmoflow_rnaseq output')
    args = parser.parse_args()
    print(args)

    jobs_list = list()
    jobs_dict = dict()
    # sleuth = run_sleuth(args.samplefile)
    # jobs_list.append(sleuth)
    QoRT_merge = QoRT_merge_all_junctions(args.samplefile, args.conditionname)
    jobs_list.append(QoRT_merge)
    JunctionSeq = run_JunctionSeq(args.samplefile, args.conditionname)
    jobs_list.append(JunctionSeq)
    jobs_dict[QoRT_merge] = JunctionSeq

    new_workflow = workflow.Workflow(jobs_list, jobs_dict,
                                     name="RNASeq Project Workflow")
    new_workflow.run('LSF')
            
